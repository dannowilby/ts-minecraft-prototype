
//         /\
//        /  \
//       /    \
//      /______\
//      
//      goes to -->
//
//         /\
//        /__\
//       /\  /\
//      /__\/__\
//

export const icosahedron = () => {
  
  const a = .5257311;
  const b = .8506508;

  return [

     -a,    0.0,  b,   -a,    0.0,  b,   0.0,    0.0,    // 0
      a,    0.0,  b,    a,    0.0,  b,   0.0625, 0.0,    // 1
      0.0,  b,    a,    0.0,  b,    a,   0.0625, 0.0625, // 4

     -a,    0.0,  b,   -a,    0.0,  b,   0.0,    0.0,    // 0
      0.0,  b,    a,    0.0,  b,    a,   0.0625, 0.0625, // 4
     -b,    a,    0.0, -b,    a,    0.0, 0.0,    0.0625, // 9

     -b,    a,    0.0, -b,    a,    0.0, 0.0,    0.0625, // 9
      0.0,  b,    a,    0.0,  b,    a,   0.0625, 0.0625, // 4
      0.0,  b,   -a,    0.0,  b,   -a,   0.0,    0.0625, // 5

      0.0,  b,    a,    0.0,  b,    a,   0.0625, 0.0625, // 4
      b,    a,    0.0,  b,    a,    0.0, 0.0,    0.0,    // 8
      0.0,  b,   -a,    0.0,  b,   -a,   0.0,    0.0625, // 5

      0.0,  b,    a,    0.0,  b,    a,   0.0625, 0.0625, // 4
      a,    0.0,  b,    a,    0.0,  b,   0.0625, 0.0,    // 1
      b,    a,    0.0,  b,    a,    0.0, 0.0,    0.0,    // 8

      b,    a,    0.0,  b,    a,    0.0, 0.0,    0.0,    // 8
      a,    0.0,  b,    a,    0.0,  b,   0.0625, 0.0,    // 1
      b,   -a,    0.0,  b,   -a,    0.0, 0.0625, 0.0,    // 10

      b,    a,    0.0,  b,    a,    0.0, 0.0,    0.0,    // 8
      b,   -a,    0.0,  b,   -a,    0.0, 0.0625, 0.0,    // 10
      a,    0.0, -b,    a,    0.0, -b,   0.0625, 0.0625, // 3

      0.0,  b,   -a,    0.0,  b,   -a,   0.0,    0.0625, // 5
      b,    a,    0.0,  b,    a,    0.0, 0.0,    0.0,    // 8
      a,    0.0, -b,    a,    0.0, -b,   0.0625, 0.0625, // 3

      0.0,  b,   -a,    0.0,  b,   -a,   0.0,    0.0625, // 5
      a,    0.0, -b,    a,    0.0, -b,   0.0625, 0.0625, // 3
     -a,    0.0, -b,   -a,    0.0, -b,   0.0,    0.0625, // 2

     -a,    0.0, -b,   -a,    0.0, -b,   0.0,    0.0625, // 2
      a,    0.0, -b,    a,    0.0, -b,   0.0625, 0.0625, // 3
      0.0, -b,   -a,    0.0, -b,   -a,   0.0,    0.0,    // 7

      0.0, -b,   -a,    0.0, -b,   -a,   0.0,    0.0,    // 7
      a,    0.0, -b,    a,    0.0, -b,   0.0625, 0.0625, // 3
      b,   -a,    0.0,  b,   -a,    0.0, 0.0625, 0.0,    // 10

      0.0, -b,   -a,    0.0, -b,   -a,   0.0,    0.0,    // 7
      b,   -a,    0.0,  b,   -a,    0.0, 0.0625, 0.0,    // 10
      0.0, -b,    a,    0.0, -b,    a,   0.0625, 0.0,    // 6

      0.0, -b,   -a,    0.0, -b,   -a,   0.0,    0.0,    // 7
      0.0, -b,    a,    0.0, -b,    a,   0.0625, 0.0,    // 6
     -b,   -a,    0.0, -b,   -a,    0.0, 0.0625, 0.0625, // 11

     -b,   -a,    0.0, -b,   -a,    0.0, 0.0625, 0.0625, // 11
      0.0, -b,    a,    0.0, -b,    a,   0.0625, 0.0,    // 6
     -a,    0.0,  b,   -a,    0.0,  b,   0.0,    0.0,    // 0

     -a,    0.0,  b,   -a,    0.0,  b,   0.0,    0.0,    // 0
      0.0, -b,    a,    0.0, -b,    a,   0.0625, 0.0,    // 6
      a,    0.0,  b,    a,    0.0,  b,   0.0625, 0.0,    // 1

      0.0, -b,    a,    0.0, -b,    a,   0.0625, 0.0,    // 6
      b,   -a,    0.0,  b,   -a,    0.0, 0.0625, 0.0,    // 10
      a,    0.0,  b,    a,    0.0,  b,   0.0625, 0.0,    // 1

     -b,    a,    0.0, -b,    a,    0.0, 0.0,    0.0625, // 9
     -b,   -a,    0.0, -b,   -a,    0.0, 0.0625, 0.0625, // 11
     -a,    0.0,  b,   -a,    0.0,  b,   0.0,    0.0,    // 0

     -b,    a,    0.0, -b,    a,    0.0, 0.0,    0.0625, // 9
     -a,    0.0, -b,   -a,    0.0, -b,   0.0,    0.0625, // 2
     -b,   -a,    0.0, -b,   -a,    0.0, 0.0625, 0.0625, // 11


     -b,    a,    0.0, -b,    a,    0.0, 0.0,    0.0625, // 9
      0.0,  b,   -a,    0.0,  b,   -a,   0.0,    0.0625, // 5
     -a,    0.0, -b,   -a,    0.0, -b,   0.0,    0.0625, // 2

      0.0, -b,   -a,    0.0, -b,   -a,   0.0,    0.0,    // 7
     -b,   -a,    0.0, -b,   -a,    0.0, 0.0625, 0.0625, // 11
     -a,    0.0, -b,   -a,    0.0, -b,   0.0,    0.0625, // 2

/*
     -a,    0.0,  b,   -a,    0.0,  b,   0.0,    0.0,    // 0
      a,    0.0,  b,    a,    0.0,  b,   0.0625, 0.0     // 1
     -a,    0.0, -b,   -a,    0.0, -b,   0.0,    0.0625, // 2
      a,    0.0, -b,    a,    0.0, -b,   0.0625, 0.0625, // 3
      0.0,  b,    a,    0.0,  b,    a,   0.0625, 0.0625, // 4
      0.0,  b,   -a,    0.0,  b,   -a,   0.0,    0.0625, // 5
      0.0, -b,    a,    0.0, -b,    a,   0.0625, 0.0,    // 6
      0.0, -b,   -a,    0.0, -b,   -a,   0.0,    0.0,    // 7
      b,    a,    0.0,  b,    a,    0.0, 0.0,    0.0,    // 8
     -b,    a,    0.0, -b,    a,    0.0, 0.0,    0.0625, // 9
      b,   -a,    0.0,  b,   -a,    0.0, 0.0625, 0.0,    // 10
     -b,   -a,    0.0, -b,   -a,    0.0, 0.0625, 0.0625, // 11
*/ 

  ];

};

const normalize = (vertex: number[]): number[] => {

  const m1 = Math.sqrt(
    Math.pow(vertex[0], 2) +
    Math.pow(vertex[1], 2) +
    Math.pow(vertex[2], 2)
  );

  const m2 = Math.sqrt(
    Math.pow(vertex[3], 2) +
    Math.pow(vertex[4], 2) +
    Math.pow(vertex[5], 2)
  );

  return [
    // position
    vertex[0] / m1,
    vertex[1] / m1,
    vertex[2] / m1,

    // normals
    vertex[3] / m2,
    vertex[4] / m2,
    vertex[5] / m2,

    // uv
    vertex[6],
    vertex[7],
  ];
};

// uv size = 0.0625
const subdivideTriangle = (v1: number[], v2: number[], v3: number[]): number[] => {

  const output: number[] = [];

  const v12 = normalize([ 
    (v1[0] + v2[0]) / 2, (v1[1] + v2[1]) / 2, (v1[2] + v2[2]) / 2,  
    (v1[0] + v2[0]) / 2, (v1[1] + v2[1]) / 2, (v1[2] + v2[2]) / 2,  
    (v1[6] + v2[6]) / 2, (v1[7] + v2[7]) / 2,
  ]);
  const v23 = normalize([ 
    (v2[0] + v3[0]) / 2, (v2[1] + v3[1]) / 2, (v2[2] + v3[2]) / 2,  
    (v2[0] + v3[0]) / 2, (v2[1] + v3[1]) / 2, (v2[2] + v3[2]) / 2,  
    (v2[6] + v3[6]) / 2, (v2[7] + v3[7]) / 2,
  ]);
  const v31 = normalize([ 
    (v3[0] + v1[0]) / 2, (v3[1] + v1[1]) / 2, (v3[2] + v1[2]) / 2,  
    (v3[0] + v1[0]) / 2, (v3[1] + v1[1]) / 2, (v3[2] + v1[2]) / 2,  
    (v3[6] + v1[6]) / 2, (v3[7] + v1[7]) / 2,
  ]);

  output.push(
    // triangle 1
    ...v1,
    ...v12,
    ...v31,

    // triangle 2
    ...v2,
    ...v23,
    ...v12,

    // triangle 3
    ...v3,
    ...v31,
    ...v23,

    // triangle 4
    ...v12,
    ...v23,
    ...v31,
  );

  return output;
};


export const subdivide = (vertices: number[], vertexSize: number): number[] => {

  const output: number[] = []

  for(let i = 0; i < vertices.length / vertexSize; i += 3) {

    const v1 = vertices.slice((i + 0) * vertexSize, (i + 1) * vertexSize); // get a slice of the vertex
    const v2 = vertices.slice((i + 1) * vertexSize, (i + 2) * vertexSize);
    const v3 = vertices.slice((i + 2) * vertexSize, (i + 3) * vertexSize);

    output.push(...subdivideTriangle(v1, v2, v3));
  }

  return output;
}



